{"cells":[{"metadata":{"_uuid":"ae17961962017685aca1997a4cefcff0581adf58","_execution_state":"idle","trusted":true},"cell_type":"code","source":"library(tidyverse) # Collection of all the good stuff like dplyr, ggplot2 ect.\nlibrary(magrittr) # For extra-piping operators (eg. %<>%)\nlibrary(data.table) # Good format to work with large datasets\nlibrary(igraph) # For network analysis","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"af61b3a5ef9003bb7c509feabceea59c0adc86db"},"cell_type":"markdown","source":"Lets see what data we have available. I prepared the whole GoT collection for you"},{"metadata":{"trusted":true,"_uuid":"046847add9f15c25e6fcd42696aba864ca143778"},"cell_type":"code","source":"list.files(path = \"../input\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"97c702cc860cab55b13ad6643b8f1be57718c705"},"cell_type":"markdown","source":"First, lets load the GoT Family Network Data"},{"metadata":{"trusted":true,"_uuid":"e315f633d2edc268fc06e88619da4c4c36ee3e3e"},"cell_type":"code","source":"edges.fam <- readRDS(\"../input/union_edges.RDS\")\nnodes.fam <- readRDS(\"../input/union_characters.RDS\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0b39dc08764a56c4e15917fd2d7e463d1698b4e8"},"cell_type":"code","source":"Lets check the family network. Can you transfer it into an directed graph? You should by now know all the preprocessing steps.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3f5d8538a080ac923111f86a1c2b8583136b3561"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"03eb0eb828ce5a08069442a0b9c43170dfa33fca"},"cell_type":"markdown","source":"Nice job! Let us analyse it a bit. What are the most central characters here, according to different measures. Be aware, that this is a directed network now. So, you will need to use the `mode` argument. Again, `?` is your friend."},{"metadata":{"trusted":true,"_uuid":"c494c08ff632e55ff7d3851884e55735bc1c29ca"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f61e03e33782ad20cc70e4ddae2dc668027a1246"},"cell_type":"markdown","source":"So far so good. Lets do a nice plot of it. Maybe you can use one selected centrality for scaling the node size?"},{"metadata":{"trusted":true,"_uuid":"f29cac6130507bd87b271b539c923bfd7dc5881f"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7033f56439efc35c35cf7d637d9c413c5dd057ff"},"cell_type":"markdown","source":"A bit of a more tricky question: Who is the lady with the most grand-children? Hint: Look at the ego network of mothers. Remember, the edges have also a `type`"},{"metadata":{"trusted":true,"_uuid":"a0f1a3ee10e8d0264fb2dca2b226553f95888143"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"eb5b8374b45a75518b5d9b3cdab97e81d64ca752"},"cell_type":"markdown","source":"Ok, why not use some of the skills we learned on the co-occurence network?"},{"metadata":{"trusted":true,"_uuid":"c800028b5f282479e6a96ff0d08b1035d24b63e4"},"cell_type":"code","source":"edges.cooc <- fread(\"../input/asoiaf-all-edges.csv\")\nnodes.cooc <- fread(\"../input/asoiaf-all-nodes.csv\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7bbb1bccb35ff0bc462dbbf14aef6dfa93150c21"},"cell_type":"markdown","source":"However, this time We could use the available information of both networks. So, why not try to join the `nodes.cooc` with the `nodes.fam` to get some adittional information. We maybe need some string operations (such as `gsub()`) to merge the not 100% aligned IDs. We might also loose some nodes, but we have to life with that."},{"metadata":{"trusted":true,"_uuid":"110a19c8d37cab7bb27f7d49e85a5e7ed2d4ef11"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"68c7d527f18ff5083fc0609290f1bbb940278d3b"},"cell_type":"markdown","source":"Lets do again the whole preperation pipeline to bring it in a (undirected) network representation. Restrict yourself to the top-100 characters."},{"metadata":{"trusted":true,"_uuid":"088f4abc1c78886d53ed0df94b09363dd8447615"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fd532c566fe0fa0170444ad2472c1295dcbe5b58"},"cell_type":"markdown","source":"Ok, why not try some network algorithms on that. We alrteady know the \"edge-betweenness\", on which you casn read up [HERE](http://igraph.org/r/doc/cluster_edge_betweenness.html) a moement. We could also use some we did not try out before. What about eg. `cluster_louvain` and `cluster_infomap`.  Note: We have a weighted network now. Some algorithms offer you the chance to integrate the weights. Make use of `?`, it's your friend :)"},{"metadata":{"trusted":true,"_uuid":"2499362f5427ab1ac546760673da811a313d3633"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"698ea7bd1ade4177d1cac59a1a6f1b8754876b47"},"cell_type":"markdown","source":"We could not do a little bencvhmark to see how good the different algorithms performed. Let us find out how good they capture the great houses. Could you think of a way to benchmark the results? However, since it is not created out of the family network, theresults will probably not be that good. If nothing at all, it will tell us how much the houses only interact among themselves."},{"metadata":{"trusted":true,"_uuid":"e5cbc83ac92e5f4368ddccb3a6218d0b3b9249e6"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"292b98b5339e9465af8eb4d390b410db57171f6d"},"cell_type":"markdown","source":"Lastly, we could plot the networks, to see how their suggested community structure looks like. If you want to do some own coloring, you might want to get familiar with the [R-Color Palettes](https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/colorPaletteCheatsheet.pdf). For some fine tuning of the plotting parameters, check [http://igraph.org/r/doc/plot.common.html](here) "},{"metadata":{"trusted":true,"_uuid":"e5aa320d3f488326eb258f4b7722ed2e5de31756"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}